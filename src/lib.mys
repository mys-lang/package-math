c"""source-before-namespace
#include <cmath>
"""

PI: f64 = 3.14159265358979323846

E: f64 = 2.71828182845904523536

func sin(angle: f64) -> f64:
    """Returns the trigonometric sine of given angle in radians.

    """

    value: f64 = 0.0

    c"value = std::sin(angle);"

    return value

func cos(angle: f64) -> f64:
    """Returns the trigonometric cosine of given angle in radians.

    """

    value: f64 = 0.0

    c"value = std::cos(angle);"

    return value

func tan(value: f64) -> f64:
    return sin(value) / cos(value)

func is_nan(value: f64) -> bool:
    """Returns true if given value is not a number.

    """

    result: bool = False

    c"value = std::isnan(value);"

    return result

func sqrt(value: f64) -> f64:
    """Returns the square root of given number.

    """

    c"value = std::sqrt(value);"

    return value

func sqrt(value: f32) -> f32:
    """Returns the square root of given number.

    """

    c"value = std::sqrt(value);"

    return value

@generic(T)
func abs(value: T) -> T:
    if value < 0:
        value *= -1

    return value

@generic(T)
func div_ceil(numerator: T, denominator: T) -> T:
    return (numerator + (denominator - 1)) / denominator

test sin():
    assert sin(0.0) == 0.0

test cos():
    assert cos(0.0) == 1.0

test tan():
    assert tan(0.0) == 0.0
    assert tan(PI / 4.0) > 0.99
    assert tan(PI / 4.0) < 1.01

test pi():
    assert PI > 3.14
    assert PI < 3.15

test e():
    assert E > 2.71
    assert E < 2.72

test nan():
    assert not is_nan(1.0)

test abs():
    assert abs(-1) == 1
    assert abs(1) == 1
    assert abs(-10.0) == 10.0
    assert abs(10.0) == 10.0

test div_ceil():
    assert div_ceil[i64](3, 3) == 1
    assert div_ceil[i64](4, 3) == 2
    assert div_ceil[i64](5, 3) == 2
    assert div_ceil[i64](6, 3) == 2
    assert div_ceil[i64](7, 3) == 3

    assert div_ceil[i64](5, 1) == 5

test sqrt():
    assert sqrt(f64(4.0)) == 2.0
    assert sqrt(f64(16.0)) == 4.0
    assert sqrt(f64(144.0)) == 12.0
    assert sqrt(f32(4.0)) == 2.0
    assert sqrt(f32(16.0)) == 4.0
    assert sqrt(f32(144.0)) == 12.0
